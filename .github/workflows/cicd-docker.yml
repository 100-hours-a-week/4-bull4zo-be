name: SpringBoot Docker CI/CD - Unified

on:
  push:
    branches:
      - main
      - develop
      - cicd/**
      - release/**

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}


    steps:
      - name: üêµ Checkout Repository
        uses: actions/checkout@v3

      - name: üêµ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: üêµ Grant execute permission to Gradle
        run: chmod +x gradlew

      - name: üêµ Build JAR (no tests)
        run: |
          echo "üêµ Building JAR without tests..."
          ./gradlew clean build -x test || { echo 'üö® Build failed!'; exit 1; }
          echo "‚úÖ Build completed successfully!"


      - name: üêµ Docker Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: üêµ Build and Tag Docker Image
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          IMAGE_NAME=4moa/moa-be
          echo "üîç REF_NAME is: $REF_NAME"

          if [[ "$REF_NAME" != "main" ]]; then
            IMAGE_NAME=4moa/moa-be-dev
          fi

          echo "üì¶ Docker Image Name: $IMAGE_NAME"
          docker buildx build --platform linux/amd64 -t $IMAGE_NAME:latest --push .

      - name: üêµ Save SSH Key
        run: |
          echo "${{ secrets.GCP_CICD_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: üêµ Deploy to Remote Server
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          IMAGE_NAME=4moa/moa-be
          echo "üîç REF_NAME is: $REF_NAME"

          if [[ "$REF_NAME" != "main" ]]; then
            IMAGE_NAME=4moa/moa-be-dev
          fi

          echo "üì¶ Pulling Docker Image: $IMAGE_NAME"

          ssh -i key.pem -o StrictHostKeyChecking=no cicd@${{ secrets.GCP_BE_HOST }} <<EOF
            IMAGE_NAME=$IMAGE_NAME

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "üêµ Writing .env on remote server..."
            cat <<EENV | sudo tee /home/cicd/moa-backend.env > /dev/null
          SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILE }}
          SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          AI_SERVER_URL=${{ secrets.AI_SERVER_URL }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_ADMIN_KEY=${{ secrets.KAKAO_ADMIN_KEY }}
          EENV
            sudo chmod 600 /home/cicd/moa-backend.env
            sudo chown cicd:cicd /home/cicd/moa-backend.env

            echo "üêµ Stopping existing container..."
            docker stop moa-backend || true
            docker rm moa-backend || true 

            echo "üêµ Starting new container..."
            docker pull \$IMAGE_NAME:latest

            echo "üêµ Running new container..."
            docker run -d --name moa-backend \
              --env-file /home/cicd/moa-backend.env \
              -p 8080:8080 \
              --restart unless-stopped \
              \$IMAGE_NAME:latest

            echo "üêµ Listing running containers..."  
            docker ps
            echo "‚úÖ Container started!"

            echo "üêµ Logs:"
            docker logs --tail 20 moa-backend || echo "üö® Failed to fetch logs"
          EOF